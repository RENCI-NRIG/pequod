<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>orca</groupId>
	<artifactId>pequod</artifactId>
	<name>Pequod</name>
	<version>4.0-SNAPSHOT</version>
	<description>Command shell for Orca 4.x+</description>
	<properties>
		<!-- location of signing keystore for jnlp -->
  		<keystorefile>/Users/ibaldin/.ssl/iliabaldine-allcerts.jks</keystorefile>
		<keystorealias>iliabaldine-ben</keystorealias>
    </properties>
	<url>http://geni-orca.renci.org</url>
	<issueManagement>
		<system>ORCA Trac</system>
		<url>https://geni-orca.renci.org/trac</url>
	</issueManagement>
	<ciManagement>
		<system>RENCI CI</system>
		<url>http://ci-dev.renci.org/hudson</url>
	</ciManagement>
	<scm>
		<connection>scm:svn:https://geni-orca.renci.org/svn/orca-external/pequod/trunk</connection>
		<url>https://geni-orca.renci.org/svn/orca-external/pequod</url>
	</scm>
	<organization>
		<name>RENCI, The University of North Carolina at Chapel Hill</name>
		<url>http://www.renci.org</url>
	</organization>
	<build>
		<plugins>
        	<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId> 
				<configuration>
					<source>1.6</source>
                    <target>1.6</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<configuration>
					<outputDirectory>
						${project.build.directory}
        			</outputDirectory>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<configuration>
					<mainClass>orca.pequod.main.MainShell</mainClass>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>appassembler-maven-plugin</artifactId>
					<executions>
						<execution>
							<id>package-execs</id>
							<phase>package</phase>
							<goals>
								<goal>assemble</goal>
							</goals>
							<configuration>
								<programs>
									<program>
										<mainClass>orca.pequod.main.MainShell</mainClass>
										<name>pequod</name>
									</program>
								</programs>
							</configuration>
						</execution>
					</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo.webstart</groupId>
				<artifactId>webstart-maven-plugin</artifactId>
				<!--
				<version>1.0-beta-2-SNAPSHOT</version>
				-->
				<executions>
        			<execution>
						<id>pack-jnlp</id>
        				<phase>install</phase>
         				<goals>
            				<goal>jnlp-single</goal> <!-- use jnlp, jnlp-inline or jnlp-single as appropriate -->
          				</goals>
        			</execution>
       			</executions>
        		<configuration>
        			<!--outputDirectory></outputDirectory--> <!-- not required?? -->

         			<!--
         					Set to true to exclude all transitive dependencies. Default is false.
         			-->
         			<excludeTransitive>false</excludeTransitive>
         			<inputTemplate>jnlp/template.vm</inputTemplate>

         			<!-- The path where the libraries are stored within the jnlp structure. not required. by default the libraries are within the working directory -->
         			<libPath>lib</libPath>

         			<!-- [optional] transitive dependencies filter - if omitted, all transitive dependencies are included -->
         			<dependencies>
	           			<!-- Note that only groupId and artifactId must be specified here. because of a limitation of the Include/ExcludesArtifactFilter -->
	           			<!-- 
	           			<includes>
	             			<include>commons-logging:commons-logging</include>
	             			<include>commons-cli:commons-cli</include>
	           			</includes>	           			
	           			<excludes>
	             			<exclude></exclude>
	           			<excludes>
	           			-->
         			</dependencies>

         			<!--resourcesDirectory>${project.basedir}/src/main/jnlp/resources</resourcesDirectory--> <!-- default value -->

         			<!-- JNLP generation -->
         			<jnlp>
	           			<!-- default values -->
	           			<!--inputTemplateResourcePath>${project.basedir}</inputTemplateResourcePath-->
	           			<!--inputTemplate>src/main/jnlp/template.vm</inputTemplate--> <!-- relative to inputTemplateResourcePath -->
	           			<!-- defaults to launch.jnlp -->
	           			<outputFile>pequod.jnlp</outputFile> 
	
	           			<!-- used to automatically identify the jar containing the main class. -->
	           			<!-- this is perhaps going to change -->
	           			<mainClass>orca.pequod.main.MainShell</mainClass>
         			</jnlp>

         			<!-- SIGNING -->
         			<!-- defining this will automatically sign the jar and its dependencies, if necessary -->
         			<sign>
         				<!-- we need to override passwords easily from the command line. ${keypass} -->
         				<!-- ${storepass} -->

					<keystore>${keystorefile}</keystore>
					<!-- assumes key and storepasses are same -->
					<keypass>${keypass}</keypass>
					<storepass>${keypass}</storepass>
					<storetype>JKS</storetype>
					<validity>3650</validity>
					<alias>${keystorealias}</alias>
						
					<!-- verify that the signing operation succeeded -->
				    <verify>true</verify> 
							
         			</sign>

			       	<!-- BUILDING PROCESS -->
		
		        	<pack200>true</pack200>
		        	<!-- default force when pack200 false, true when pack200 selected ?? -->
					<gzip>true</gzip> 
		
		   			<!-- causes a version attribute to be output in each jar resource element, optional, default is false -->
					<outputJarVersions>false</outputJarVersions>
		
		  			<!--install>false</install--> <!-- not yet supported -->
		  			<verbose>true</verbose>
       			</configuration>
			</plugin>
		</plugins>
	</build>
	<dependencies>
		<dependency>
			<groupId>orca.core</groupId>
			<artifactId>shirako</artifactId>
			<version>${project.version}</version>
			<classifier>client</classifier>
		</dependency>
		<dependency>
			<groupId>jline</groupId>
			<artifactId>jline</artifactId>
			<version>2.6</version>
		</dependency>
	</dependencies>
</project>
